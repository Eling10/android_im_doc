{"./":{"url":"./","title":"android客户端集成","keywords":"","body":"概述 欢迎使用 ElingIM。 ElingIM 即时通讯是深圳壹零后信息技术有限公司为开发者提供的基于移动互联网的即时通讯能力，支持单聊、群聊、发语音、发图片、发视频、实时音频、实时视频等，让开发者摆脱繁重的移动 IM 通讯底层开发。 功能 【即时通信】支持数亿终端同时在线，单机（4核8G）可支持50万人同时在线。 【实时通话】P2P无缝传输，通话延时低至150ms。 特点 IM消息系统集群支持上亿并发，支持横向扩展！ 音视频超低延时，自适应回音消除业内领先！ 服务器兼容，轻松应对大量连接！ Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-06-12 "},"create_apps.html":{"url":"create_apps.html","title":"注册并创建应用","keywords":"","body":"注册并创建应用 注册开发者账号 第一步： 进入 ElingIM 开发者注册及管理后台，点击 “注册”，进入开发者管理后台注册页面。 ​​ 第二步： 在注册页面中，先填入邮箱，然后点击 “发送验证码”，我们会向您填写的邮箱中发送验证码。输入您收到的验证码并设置好密码，然后点击 “注册” 按钮，即可完成注册。 创建应用 第一步： 点击 “创建应用” 按钮，如下图： ​​ 第二步： 填写创建应用的相关信息，如下图： 注：Android包名 是您项目中的 applicationId，用来唯一标识一个 App。 ​​ 第三步： 填写完应用信息后，点击 “创建” 按钮。应用创建成功后，系统会为您生成 appid 、appSecret 以及相关配置信息，如下图： Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-06-12 "},"sdk_integration_guide.html":{"url":"sdk_integration_guide.html","title":"SDK导入","keywords":"","body":"导入SDK SDK支持 JDK 1.6 和 Android SDK version 18 以上系统 ​ 1.1 导入SDK //添加依赖 implementation 'com.eling:imlibrary:1.0.0' //添加依赖仓库地址 allprojects { repositories { maven { url \"https://raw.githubusercontent.com/Eling10/android_im_sdk_imlibrary/master\" } } } 1.2 SDK中已导入的第三方依赖 implementation 'com.android.support:appcompat-v7:25.2.0' //alyun oss implementation('com.aliyun.dpa:oss-android-sdk:+') { exclude module: 'okhttp' } implementation 'com.zhy:okhttputils:2.6.2' implementation 'com.google.code.gson:gson:2.6.2' 使用SDK时避免与上诉包冲突 Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-07-03 "},"sdk_basic_description.html":{"url":"sdk_basic_description.html","title":"SDK基本说明","keywords":"","body":"SDK基本说明 核心类介绍 类 介绍 功能 ELClient 客户端 单例对象，负责整个SDK的初始化及IM相关的配置 ELUserManager 用户管理类 管理当前登录的用户信息 ELLoginManager 登录管理类 负责IM的注册、登录、登出相关的操作 ELChatManager 管理 负责聊天相关的操作，支持单聊和群聊 ELGroupManager 群组管理类 管理与群相关的业务逻辑（查询、创建、解散、修等） ELContactManager 联系人管理类 负责好友的查询、添加、删除等相关的逻辑 ELCallManager 音视频通话管理类 可以进行1v1的音视频通话 Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-06-03 "},"client.html":{"url":"client.html","title":"客户端","keywords":"","body":"客户端 ELClient 1.1 初始化 ELClient.getInstance().init(getContext(),\"您应用的AppId\", \"您应用的AppSecret\"); 1.2 配置类 ELOSSOptions 阿里云OSS配置类，消息中的附件（音频、视频、图片等）是存储在阿里云OSS服务器上的。 属性 类型 描述 bucketName String 默认：szeling-master endPoint String 默认：http://oss-cn-shenzhen.aliyuncs.com/ directoryName String 服务器上存储文件的一级目录名，默认：ElingIm fileDirectoryName String 文件目录名（二级目录），默认：file imageDirectoryName String 图片目录名（二级目录），默认：images voiceDirectoryName String 语音目录名（二级目录），默认：voice videoDirectoryName String 视频目录名（二级目录），默认：video 1.3 广播回调 ELClient.getInstance().setDispatchEvent(new DispatchEvent() { @Override public void dispatchEvent(String aEventID, boolean success, Object eventObj) { switch (aEventID) { case AEvent.AEVENT_VOIP_REV_CALLING: //收到视频通话请求 break; case AEvent.AEVENT_VOIP_REV_CALLING_AUDIO: { //收到音频通话请求 } break; case AEvent.AEVENT_C2C_REV_MSG: //收到个人消息 if (eventObj instanceof Conversation) { //会话消息 } if (eventObj instanceof Message) { //聊天消息 } break; case AEvent.AEVENT_REV_SYSTEM_MSG: //接收到系统消息 if (eventObj instanceof SystemMessages) { SystemMessages systemMessages = (SystemMessages) eventObj; //对方发来好友邀请 if (ADD_FRIEND_SYS_MSG.equals(systemMessages.getType())) { } //接收删除好友消息 if (DEL_FRIEND_SYS_MSG.equals(systemMessages.getType())) { } //对方同意好友请求 if (ACCEPTE_FRIEND_SYS_MSG.equals(systemMessages.getType())) { } //群主解散广播给所有群成员 if (DISBANDED_GROUP_SYS_MSG.equals(systemMessages.getType())) { } //群主解散广播给所有群成员 if (REMOVE_GROUP_MEMBER_SYS_MSG.equals(systemMessages.getType())) { } } break; case AEvent.AEVENT_LOGOUT: break; case AEvent.AEVENT_USER_KICKED: //在其他地方登陆 break; case AEvent.AEVENT_CONN_DEATH: //连接异常 break; case AEvent.AEVENT_USER_OFFLINE: //用户下线 break; case AEvent.AEVENT_USER_ONLINE: //用户已上线 break; } } }); Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-06-12 "},"login_manager.html":{"url":"login_manager.html","title":"注册登录管理","keywords":"","body":"客户端 ELLoginManager 登录管理类，负责IM用户的注册、登录、登出以及监听登录状态相关的逻辑。 API介绍 用户注册 /** * 用户注册 * * @param username 用户名 * @param password 密码（6~18位，字母+数字组合） * @param RegisterCallBack 完成的回调 */ ELLoginManager.getInstance().register(phone, pwd, new NetworkManagerListener.RegisterCallBack() { @Override public void onSucceed(GeneralResponse generalResponse) { if (generalResponse.getCode() == 200) { UIUtils.showToast(\"注册成功\"); } } @Override public void onfailure(Exception e) { loadError(e); } }); 登录IM服务器 登录成功后，用户信息会被缓存在本地，可以通过 ELUserManager 类来获取当前登录的用户信息。 /** * 用户登录 * * @param username 用户名 * @param password 密码（6~18位，字母+数字组合） * @param LoginCallBack 完成的回调 */ ELLoginManager.getInstance().login(username, password, new NetworkManagerListener.LoginCallBack() { @Override public void onSucceed(LoginResponse loginResponse) { if (generalResponse.getCode() == 200) { UIUtils.showToast(\"登录成功\"); } } @Override public void onfailure(int errerCode, Exception e) { loadError(e); } }); 登出 退出登录后，SDK 会清空缓存在本地的用户数据。 /** * 登出 * * @param LoginOutCallBack 完成的回调 */ ELLoginManager.getInstance().loginOut(new NetworkManagerListener.LoginOutCallBack() { @Override public void onSucceed(GeneralResponse generalResponse) { if (generalResponse.getCode() == 200) { UIUtils.showToast(\"登出成功\"); } } @Override public void onfailure(Exception e) { } }); } Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-06-03 "},"user_manager.html":{"url":"user_manager.html","title":"用户管理","keywords":"","body":"用户管理 ELUserManager 管理当前登录用户相关的信息 API介绍 获取当前登录用户 LoginResponse.DataBean.UserInfoBean userInfoBean = ELUserManager.getInstance().getUserInfoBean(); 获取指定用户信息 此方法是用来获取指定用户的信息 /** * 获取用户信息 * * @param userId 用户ID * @param GetDetailCallBack 回调 */ ELUserManager.getInstance(). getUserInformation(userId, new NetworkManagerListener.GetDetailCallBack() { @Override public void onSucceed(UserDetailResponse userDetail) { } @Override public void onfailure(Exception e) { } }); 修改当前用户信息 /** * 修改用户信息 * @param avatar 头像地址 * @param nickName 昵称 * @param UpdateUserInformationWithAvatar 回调 */ ELUserManager.getInstance().updateUserInformationWithAvatar(avatar, nickName, new NetworkManagerListener.UpdateUserInformationWithAvatar() { @Override public void onSucceed(GeneralResponse generalResponse) { } @Override public void onfailure(Exception e) { } }); 发送邮箱验证码 /** * 发送邮箱验证码 * * @param email 邮箱 * @param type 验证码类型 4 IM修改密码 6 绑定邮箱 * @param VerificationCodeCallBack 回调 */ ELUserManager.getInstance().sendCodeToEmail(email, type, new NetworkManagerListener.VerificationCodeCallBack() { @Override public void onSucceed(GeneralResponse generalResponse) { } @Override public void onfailure(Exception e) { } }); 注：绑定邮箱 或者 修改密码 时，需要先调用此API来获取对应的验证码。 绑定邮箱 /** * 绑定邮箱 * * @param email 邮箱地址 * @param code 邮箱验证码 * @param BindEmailCallBack 回调 */ ELUserManager.getInstance().bindEmail(email, code, new NetworkManagerListener.BindEmailCallBack() { @Override public void onSucceed(GeneralResponse generalResponse) { } @Override public void onfailure(Exception e) { } }); 修改密码 /** * 修改密码 * * @param newPassword 新密码（6~18位，字母+数字组合） * @param account 账号 * @param code 邮箱验证码 * @param ChangePswCallBack 回调 */ ELUserManager.getInstance().changePsw(newPassword, account, code, new NetworkManagerListener.ChangePswCallBack() { @Override public void onSucceed(GeneralResponse generalResponse) { } @Override public void onfailure(Exception e) { } }); Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-06-12 "},"contact_manager.html":{"url":"contact_manager.html","title":"好友管理","keywords":"","body":"好友管理 ELContactManager 管理好友的基本功能，比如添加、移除代理，添加、删除好友等。 非好友关系的双方是不能进行单聊的。 API介绍 获取好友列表 /** * 获取好友列表 * * @param GetFriendsCallBack 完成的回调 */ ELContactManager.getInstance().getFriends(new NetworkManagerListener.GetFriendsCallBack() { @Override public void onSucceed(FriendsResponse friendsResponse) { } @Override public void onfailure(Exception e) { loadError(e); } }); 注：好友数据都是从服务器上获取的，SDK 内部不会对好友数据做存储。 查找联系人 /** * 搜索联系人 * * @param username 用户名 * @param SearchSriUsersCallBack 完成的回调 */ ELContactManager.getInstance().searchSriUsers(username, new NetworkManagerListener.SearchSriUsersCallBack() { @Override public void onSucceed(SearchContentResponse searchContentResponse) { } @Override public void onfailure(Exception e) { loadError(e); } }); 添加好友 /** * 添加好友 * * @param userId 用户ID * @param etMsg 邀请信息 */ ELContactManager.getInstance().sendAddFriendSysMsg(userId,etMsg, new NetworkManagerListener.AddFriendBeanCallBack() { @Override public void onSucceed(GeneralResponse generalResponse) { } @Override public void onfailure(Exception e) { loadError(e); } }); 删除好友 好友删除成功后，会删除与该好友之间的会话数据。 /** * 删除好友 * * @param userId 用户ID */ ELContactManager.getInstance().deleteFriend(userId, new NetworkManagerListener.DeleteFriendCallBack() { @Override public void onSucceed(GeneralResponse generalResponse) { } @Override public void onfailure(Exception e) { } }); 同意好友申请 /** * 同意好友申请 * * @param userId 用户ID */ ELContactManager.getInstance().acceptAddFriend(userId, new NetworkManagerListener.AcceptAddFriendCallBack() { @Override public void onSucceed(GeneralResponse generalResponse) { } @Override public void onfailure(Exception e) { } }); Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-06-03 "},"chat_manager.html":{"url":"chat_manager.html","title":"消息管理","keywords":"","body":"消息管理 ELChatManager 管理所有与聊天相关的逻辑，包括单聊和群聊消息的查询、发送、更新、删除的功能。 消息 Message 消息：IM 交互的实体,目前的消息体的类型有：文本消息、图片消息、文件消息、语音消息、视频消息、音频通话、视频通话。 构造文本消息 /** * 初始化消息实例 * * @param mSessionId 会话ID（接收方的ID） * @param mSessionType 接收方类型 * @param content 文本内容 */ TextMessage obtain = TextMessage.obtain(content, mSessionType, mSessionId); 发送文本消息 /** * 发送文本消息 * * @param obtain 消息对象 * @param onAttached 本地添加消息成功 * @param success 发送消息成功 * @param failed 发送消息失败 */ ELChatManager.getInstance().sendTextMsg(obtain, new XHResultCallback.SendMessageCallback() { @Override public void onAttached(Message message) { } @Override public void success(Object o, Message message) { } @Override public void failed(String s, Message message) { } }); 构造图片消息 /** * 初始化消息实例 * * @param mSessionId 会话ID（接收方的ID） * @param mSessionType 接收方类型 * @param imageFileSource 图片文件File对象 */ ImageMessage obtain = ImageMessage.obtain(mSessionType, mSessionId, imageFileSource); 发送图片消息 /** * 发送图片消息 * * @param obtain 消息对象 * @param mContext 上下文对象 * @param onProgress 文件上传进度 * @param onAttached 保存数据库成功 * @param success 发送消息成功 * @param failed 发送消息失败 */ ELChatManager.getInstance().sendImgMsg(mContext, obtain, new XHResultCallback.ISendMediaMessageCallback() { @Override public void onProgress(int progress, Message message) { } @Override public void onAttached(Message message) { } @Override public void success(Object o, Message message) { } @Override public void failed(String s, Message message) { } }); 构造语音消息 /** * 初始化消息实例 * * @param mSessionId 会话ID（接收方的ID） * @param mSessionType 接收方类型 * @param duration 语音时长 * @param file 音频文件File对象 */ VoiceMessage obtain = VoiceMessage.obtain(mSessionType, mSessionId, duration, file); 发送语音消息 /** * 发送语音消息 * * @param obtain 消息对象 * @param mContext 上下文对象 * @param onProgress 文件上传进度 * @param onAttached 保存数据库成功 * @param success 发送消息成功 * @param failed 发送消息失败 */ ELChatManager.getInstance().sendVoiceMsg(mContext, obtain, new XHResultCallback.ISendMediaMessageCallback() { @Override public void onProgress(int progress, Message message) { } @Override public void onAttached(Message message) { } @Override public void success(Object o, Message message) { } @Override public void failed(String s, Message message) { } }); 构造视频消息 /** * 初始化消息实例 * * @param mSessionId 会话ID（接收方的ID） * @param mSessionType 接收方类型 * @param file 视频频文件File对象 */ VideoMessage obtain = VideoMessage.obtain(mSessionType, mSessionId, file); 发送视频消息 /** * 发送视频消息 * * @param obtain 消息对象 * @param mContext 上下文对象 * @param onProgress 文件上传进度 * @param onAttached 保存数据库成功 * @param success 发送消息成功 * @param failed 发送消息失败 */ ELChatManager.getInstance().sendVideoMsg(mContext, obtain, new XHResultCallback.ISendMediaMessageCallback() { @Override public void onProgress(int progress, Message message) { } @Override public void onAttached(Message message) { } @Override public void success(Object o, Message message) { } @Override public void failed(String s, Message message) { } }); 获取历史消息 /** * 获取指定会话的消息，如果数据库中不存在，则从服务器中取，按时间顺序 升序 排列（服务器中的数据会同步到本地数据库） * * @param conversationId 会话ID * @param page 第几页（从 1 开始） * @param size 每页显示的条数 */ ELChatManager.getInstance().getMessageList(conversationId, page, size, new NetworkManagerListener.GetMessageListCallBack() { @Override public void onSucceed(List messages) { } @Override public void onfailure(Exception e) { } }); 删除单条消息 /** * 获取指定会话的消息，如果数据库中不存在，则从服务器中取，按时间顺序 升序 排列（服务器中的数据会同步到本地数据库） * * @param messageId 消息ID */ ELChatManager.getInstance().deleteMsg(messageId, new NetworkManagerListener.DeleteMsgCallBack() { @Override public void onSucceed(GeneralResponse generalResponse) { } @Override public void onfailure(Exception e) { } }); 获取会话列表 /** * 获取当前用户的所有会话数据，会按照最新的那一条消息进行 降序 排列 * * @param messageId 消息ID */ List list = ELChatManager.getInstance().getConversations(); 删除会话 /** * 当会话被删除后，它底下的所有消息数据都会被删除。 * * @param messageId 消息ID */ ELChatManager.getInstance().deleteConversation(item.getConversationId()); Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-06-12 "},"group_manager.html":{"url":"group_manager.html","title":"群组管理","keywords":"","body":"群管理 ELGroupManager API介绍 获取群列表 /** * 获取用户已加入的群组 * * @param GetMyGroupCallBack 完成的回调 */ ELGroupManager.getInstance().getMyGroup(new NetworkManagerListener.GetMyGroupCallBack() { @Override public void onSucceed(GetMyGroupResponse getMyGroupResponse) { } @Override public void onfailure(Exception e) { } }); 查询群详情 /** * 获取群组详情信息 * * @param groupId 群组ID * @param GetGroupInfoCallBack 完成的回调 */ ELGroupManager.getInstance().getGroupInfo(groupId, new NetworkManagerListener.GetGroupInfoCallBack() { @Override public void onSucceed(GroupInfoResponpse GroupInfoResponpse) { } @Override public void onfailure(Exception e) { } }); 创建群组 /** * 创建群组 * * @param groupName 群组名称（最多20位字符长度） * @param CreateGroupCallback 完成的回调 */ ELGroupManager.getInstance().createGroup(groupName, new XHGroupManagerCallback.CreateGroupCallback() { @Override public void success(Object mGroupId) { } @Override public void failed(String s) { } }); 注：群名称的字符长度 SDK 内部做了限制，必须在 20 个字符以内（包括 20 个字符）。 退出群组 /** * 退出群组（数据库中与本群相关的会话数据会被清除） * * @param groupId 群组ID * @param DeleteUserFormGroupCallback 完成的回调 */ ELGroupManager.getInstance().deleteUserFormGroup(groupId, userId, new XHGroupManagerCallback.DeleteUserFormGroupCallback() { @Override public void success(Object o) { } @Override public void failed(String s) { } }); 注：只有群成员可以退群，群主不能退群，只能解散群。操作成功后，SDK 内部会删除与本群相关的会话数据。 解散群组 /** * 解散群组（数据库中与本群相关的会话数据会被清除） * * @param groupId 群组ID * @param DeleteGroupCallback 完成的回调 */ ELGroupManager.getInstance().deleteGroup(groupId, new XHGroupManagerCallback.DeleteGroupCallback() { @Override public void success(Object o) { } @Override public void failed(String s) { } }); 注：只能群主有权限解散群。群被解散后，群内的所有成员（群主除外）都会收到通知，同时 SDK 内部会删除与本群相关的会话数据。 添加群成员 /** * 添加群组成员 * * @param selectedIds 被邀请的用户名列表 * @param groupId 群组ID * @param AddUserToGroupCallback 完成的回调 */ ELGroupManager.getInstance().addUserToGroup(groupId, selectedIds, new XHGroupManagerCallback.AddUserToGroupCallback() { @Override public void success(Object o) { } @Override public void failed(String s) { } }); 删除群成员 /** * 将群成员移出群组 * * @param selectedIds 要移出群组的用户列表 * @param groupId 群组ID * @param DeleteUserFormGroupCallback 完成的回调 */ ELGroupManager.getInstance().deleteUserFormGroup(groupId, selectedIds, new XHGroupManagerCallback.DeleteUserFormGroupCallback() { @Override public void success(Object o) { } @Override public void failed(String s) { } }); 注：只有群主有权限删除群成员，且群主不能删除自己。 删除群成员 /** * 修改群信息（群名称、头像），传空则表示不修改此项 * * @param groupId 群组ID * @param groupName 群名称 * @param groupAvatar 群头像 * @param EditGroupInfoCallBack 完成的回调 * ELGroupManager.getInstance().editGroupInfo(groupId, groupName, groupAvatar, new NetworkManagerListener.EditGroupInfoCallBack() { @Override public void onSucceed(GeneralResponse generalResponse) { } @Override public void onfailure(Exception e) { } }); 注：只有群主有权限修改群信息。 Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-06-12 "},"call_manager.html":{"url":"call_manager.html","title":"实时音视频","keywords":"","body":"实时音视频 ELCallManager 目前只支持1对1音视频通话，包括语音通话和视频通话。 通话配置 ELCallOptions 属性 类型 描述 openGLEnable boolean 是否使用 openGL 渲染，默认 true hwEncodeEnable boolean 是否使用硬编码，默认 false dynamicBitrateAndFPSEnable boolean 是否动态调节帧率码率，默认 false bigVideoBitrate int 大图码率，默认 500 bigVideoFPS int 大图帧率，默认 15 smallVideoBitrate int 小图码率，默认 100 smallVideoFPS int 小图帧率，默认 15 resolution ELCallVideoResolution 视频分辨率，默认 ELCallVideoResolution_360BW_640BH_180SW_320SH videoCodecType ELCallVideoCodecType 视频编码格式，默认 ELCallVideoCodecTypeH264 audioCodecType ELCallAudioCodecType 音频编码格式配置，默认 ELCallAudioCodecTypeAAC API介绍 主叫方： 通话发起方。 被叫方： 通话接收方 发起语音通话： /** * 发起语音通话 * * @param sessionId 接收人ID * @param AudioCallCallback 回调 */ ELCallManager.getInstance().audioCall(sessionId, new VoipManagerCallback.AudioCallCallback() { @Override public void success(Object mSessionId) { } @Override public void failed(String s) { } }); 发起视频通话： /** * 发起视频通话 * * @param sessionId 接收人ID * @param targetPlayer 显示本地摄像头图像 * @param VideoCallCallback 回调 */ ELCallManager.getInstance().videoCall(sessionId, targetPlayer, new VoipManagerCallback.VideoCallCallback() { @Override public void success(Object mSessionId) { } @Override public void failed(String s) { stopAndFinish(); } }); 取消呼叫（主叫方调用）： /** * 取消呼叫 * * @param HangupCallCallback 回调 */ ELCallManager.getInstance().cancel(new VoipManagerCallback.HangupCallCallback() { @Override public void success(Object mSessionId) { } @Override public void failed(String s) { } 挂断语音通话 / 视频通话： /** * 挂断语音通话 / 视频通话 * * @param HangupCallCallback 回调 */ ELCallManager.getInstance().hangup(new VoipManagerCallback.HangupCallCallback() { @Override public void success(Object mSessionId) { stopAndFinish(); } @Override public void failed(String s) { stopAndFinish(); } }); 设置显示双方画面： /** * 设置显示双方画面的Player，不需要显示视频时可以传null * @param selfPlayer 远程画面 * @param targetPlayer 本地相机画面 * @param SetupViewCallback 回调 */ ELCallManager.getInstance().setupView(selfPlayer, targetPlayer, new VoipManagerCallback.SetupViewCallback() { @Override public void success(Object mSessionId) { } @Override public void failed(String s) { } }); 关闭本地画面： /** * 关闭本地画面 */ ELCallManager.getInstance().stopPerview(); 接听语音通话 / 视频通话： /** * 接听语音通话 / 视频通话 * * @param sessionId 接收人ID * @param AcceptCallCallback 回调 */ ELCallManager.getInstance().accept(sessionId, new VoipManagerCallback.AcceptCallCallback() { @Override public void success(Object mSessionId) { } @Override public void failed(String s) { stopAndFinish(); } }); 拒绝接听（被叫方调用）： /** * 拒绝接听（被叫方调用） * * @param RefuseCallback 回调 */ ELCallManager.getInstance().refuse(new VoipManagerCallback.RefuseCallback() { @Override public void success(Object mSessionId) { finish(); } @Override public void failed(String s) { finish(); } }); 切换摄像头方向： /** * 切换摄像头方向 * * @param RefuseCallback 回调 */ ELCallManager.getInstance().switchCamera(); 动态开关视频： /** * 动态开关视频 * @param isEnable true 开 false 关 */ ELCallManager.getInstance().setVideoEnable(isEnable); 动态开关音频： /** * 动态开关音频 * @param isEnable true 开 false 关 */ ELCallManager.getInstance().setVideoEsetAudioEnablenable(isEnable); 设置扬声器： /** * 设置扬声器 * @param isEnable true 开 false 关 */ ELCallManager.getInstance().setSpeakerphoneOn(isEnable); 打开音频管理器： /** * 打开音频管理器 */ ELCallManager.getInstance().startAudio(); 关闭音频管理器： /** * 关闭音频管理器 */ ELCallManager.getInstance().stopAudio(); 通话状态监听： /** * 通话状态监听 */ ELCallManager.getInstance().setDispatchEvent(new DispatchEvent() { @Override public void dispatchEvent(String aEventID, boolean success, Object eventObj) { switch (aEventID){ case AEvent.AEVENT_VOIP_REV_BUSY: MLOC.d(\"\",\"对方线路忙\"); break; case AEvent.AEVENT_VOIP_REV_REFUSED: MLOC.d(\"\",\"对方拒绝通话\"); break; case AEvent.AEVENT_VOIP_REV_HANGUP: MLOC.d(\"\",\"对方已挂断\"); break; case AEvent.AEVENT_VOIP_REV_CONNECT: MLOC.d(\"\",\"对方允许通话\"); break; case AEvent.AEVENT_VOIP_REV_ERROR: MLOC.d(\"\",\"连接异常\"); break; } } });; Copyright © e-ling.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2020-06-11 "}}